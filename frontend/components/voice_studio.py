import streamlit as st
from backend.models import get_sample_voices, generate_waveform
from ..utils import vapi_ai

def show_voice_studio():
    st.header("üéôÔ∏è AI Voice Studio")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.subheader("AI Voice Selection")
        
        # Load voices from API or use sample voices
        voices = []
        if vapi_ai.api_key and not st.session_state.using_sample_voices:
            if st.button("üîÑ Load Voices from API"):
                with st.spinner("Loading voices from Vapi API..."):
                    voices = vapi_ai.get_assistants()
                    if voices:
                        st.success(f"Loaded {len(voices)} voices!")
                        st.session_state.voices_loaded = True
                        st.session_state.using_sample_voices = False
                    else:
                        st.error("Failed to load voices from API")
                        st.session_state.using_sample_voices = True
                        voices = get_sample_voices()
            else:
                if st.session_state.voices_loaded:
                    voices = vapi_ai.get_assistants()
                else:
                    voices = get_sample_voices()
                    st.session_state.using_sample_voices = True
                    st.info("Using sample voices. Configure API for real voices.")
        else:
            voices = get_sample_voices()
            st.session_state.using_sample_voices = True
            st.info("Using sample voices. Configure API for real voices.")
        
        if voices:
            voice_options = {f"{v['name']} ({v.get('category', 'custom')})": v['voice_id'] for v in voices}
            selected_voice_name = st.selectbox("Select AI Voice", options=list(voice_options.keys()))
            st.session_state.selected_effect = voice_options[selected_voice_name]
            
            # Voice settings
            st.subheader("Voice Settings")
            stability = st.slider("Stability", 0.0, 1.0, 0.5, 0.1)
            similarity = st.slider("Similarity Boost", 0.0, 1.0, 0.5, 0.1)
            
            # Text to speech
            st.subheader("Text to Speech")
            text_input = st.text_area("Enter text to convert to speech", 
                                    height=100,
                                    placeholder="Enter text to test the AI voice...",
                                    value="Hello! This is a real AI voice generated by ElevenLabs.")
            
            if st.button("üéµ Generate Speech", type="primary"):
                if text_input and st.session_state.selected_effect:
                    if st.session_state.using_sample_voices:
                        st.warning("Sample mode: Audio generation requires a valid API key")
                    else:
                        with st.spinner("Generating AI voice with Vapi API..."):
                            # This would need to be implemented based on your specific audio generation needs
                            st.warning("Audio generation implementation needed")
                else:
                    st.error("Please select a voice and enter text")
        else:
            st.warning("No voices available. Click 'Load Voices from API' to load them from Vapi.")
    
    with col2:
        st.subheader("Voice Preview")
        
        # Display waveform
        waveform_img = generate_waveform()
        st.image(waveform_img, width='stretch')
        
        if st.session_state.selected_effect:
            current_voice = next((v for v in (vapi_ai.get_assistants() if not st.session_state.using_sample_voices else get_sample_voices()) 
                                if v['voice_id'] == st.session_state.selected_effect), None)
            if current_voice:
                st.info(f"""
                **Selected Voice:** {current_voice['name']}
                **Category:** {current_voice.get('category', 'custom')}
                **Description:** {current_voice.get('description', 'No description available')}
                **ID:** {current_voice['voice_id']}
                """)